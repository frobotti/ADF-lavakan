{
	"name": "updateVentas",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ventas",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "tablaMoneda",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "tablaSucursal",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tablaVenta",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select2"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Fecha as timestamp 'yyyy-MM-dd\\'T\\'HH:mm:ss',",
				"          Comprobante as string,",
				"          Numero as string,",
				"          SucNombre as string,",
				"          Identificador as string,",
				"          Contacto as string,",
				"          ArtCodigo as string,",
				"          ArtSKU as string,",
				"          ArtNombre as string,",
				"          ArtComentario as string,",
				"          ArtCantidad as integer,",
				"          Moneda as string,",
				"          ArtNetoFinal as string,",
				"          ArtImpuesto1 as string,",
				"          ArtTasaImp1 as string,",
				"          ArtDescuento as string,",
				"          ArtBrutoFinal as string,",
				"          Vendedor as string,",
				"          Comentario as string,",
				"          Id as string,",
				"          ContactoId as long,",
				"          Estado as string,",
				"          QDecimalesMoneda as string,",
				"          FormatoMoneda as string,",
				"          TotalComprobante as string,",
				"          RedondeoComprobante as string,",
				"          ArtId as integer,",
				"          AVaId as integer,",
				"          ArtCodigoBarras as string,",
				"          UMeDecimales as string,",
				"          ArtImpuesto2 as string,",
				"          ArtTasaImp2 as string,",
				"          ArtImpuesto3 as string,",
				"          ArtTasaImp3 as string,",
				"          ArtImpuesto4 as string,",
				"          ArtTasaImp4 as string,",
				"          ArtImpuesto5 as string,",
				"          ArtTasaImp5 as string,",
				"          ArtImpuesto6 as string,",
				"          ArtTasaImp6 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as integer,",
				"          nombre as string,",
				"          simbolo as string,",
				"          codigo_internacional as integer,",
				"          codigo_iso4217 as string,",
				"          decimales as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source(output(",
				"          id as integer,",
				"          nombre as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"source1 select(mapColumn(",
				"          Fecha,",
				"          Comprobante,",
				"          numero_comprobante = Numero,",
				"          sku = ArtSKU,",
				"          comentario_producto = ArtComentario,",
				"          cantidad = ArtCantidad,",
				"          id_cliente = ContactoId,",
				"          vendedor = Vendedor,",
				"          id_producto = ArtId,",
				"          importe_neto = ArtNetoFinal,",
				"          tasa_iva = ArtTasaImp1,",
				"          importe_bruto = ArtBrutoFinal,",
				"          descuento_porcentaje = ArtDescuento,",
				"          Moneda,",
				"          id_variedad = AVaId,",
				"          Comentario,",
				"          SucNombre",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source2 lookup(Moneda == simbolo,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          Fecha,",
				"          Comprobante,",
				"          numero_comprobante,",
				"          sku,",
				"          comentario_producto,",
				"          cantidad,",
				"          id_cliente,",
				"          vendedor,",
				"          id_producto,",
				"          importe_neto,",
				"          tasa_iva,",
				"          importe_bruto,",
				"          descuento_porcentaje,",
				"          id_moneda = id,",
				"          id_variedad,",
				"          Comentario,",
				"          SucNombre",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, source3 lookup(SucNombre == nombre,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 select(mapColumn(",
				"          Fecha,",
				"          Comprobante,",
				"          numero_comprobante,",
				"          sku,",
				"          comentario_producto,",
				"          cantidad,",
				"          id_cliente,",
				"          vendedor,",
				"          id_producto,",
				"          importe_neto,",
				"          tasa_iva,",
				"          importe_bruto,",
				"          descuento_porcentaje,",
				"          id_moneda,",
				"          id_variedad,",
				"          comentario = Comentario,",
				"          id_sucursal = id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(descuento_porcentaje = toDecimal(descuento_porcentaje, 5, 2),",
				"          importe_neto = toDecimal(importe_neto, 18, 6),",
				"          importe_bruto = toDecimal(replace(importe_bruto, ',', '.'), 18, 6),",
				"          tasa_iva = toDecimal(tasa_iva, 5, 4),",
				"          id_cliente = iif(id_cliente == 0, toLong(null()), id_cliente),",
				"          cantidad = toDecimal(cantidad, 18, 6)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          fecha as timestamp,",
				"          comprobante as string,",
				"          numero_comprobante as string,",
				"          id_sucursal as integer,",
				"          comentario as string,",
				"          id_cliente as long,",
				"          sku as string,",
				"          comentario_producto as string,",
				"          cantidad as decimal(18,2),",
				"          id_producto as integer,",
				"          id_variedad as integer,",
				"          id_moneda as integer,",
				"          importe_neto as decimal(18,4),",
				"          tasa_iva as decimal(5,2),",
				"          descuento_porcentaje as decimal(5,2),",
				"          importe_bruto as decimal(18,4),",
				"          vendedor as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          fecha = Fecha,",
				"          comprobante = Comprobante,",
				"          numero_comprobante,",
				"          id_sucursal,",
				"          comentario,",
				"          id_cliente,",
				"          sku,",
				"          comentario_producto,",
				"          cantidad,",
				"          id_producto,",
				"          id_variedad,",
				"          id_moneda,",
				"          importe_neto,",
				"          tasa_iva,",
				"          descuento_porcentaje,",
				"          importe_bruto,",
				"          vendedor",
				"     )) ~> sink1"
			]
		}
	}
}